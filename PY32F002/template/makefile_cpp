
# FOR C++ RENAME THIS FILE TO "makefile" AND RENAME "src/main.c" to "src/main.cpp"
# FOR C, KEEP USING THE OTHER "makefile", THIS ONE CAN BE DELETED SAFELY

# ===================================================================================
# Project Makefile
# ===================================================================================
# Project:  PY32F002 Example
# Author:   Stefan Wagner
# Year:     2023
# URL:      https://github.com/wagiminator    
# ===================================================================================
# Install toolchain:
#   sudo apt install build-essential gcc-arm-none-eabi
#   sudo apt install python3 python3-pip
#   pip install puyaisp
#
# Type "make flash" in the command line.
# ===================================================================================

# Files and Folders
PROJECT  = template_app
SOURCE   = src
OUTPUT   = bin

# Microcontroller Settings
TARGET   = py32f002ax5
F_CPU    = 24000000
LDSCRIPT = ld/$(TARGET).ld
CPUARCH  = -mcpu=cortex-m0plus -mthumb

# Toolchain
PREFIX   = arm-none-eabi
CC       = $(PREFIX)-g++
OBJCOPY  = $(PREFIX)-objcopy
OBJDUMP  = $(PREFIX)-objdump
OBJSIZE  = $(PREFIX)-size
ISPTOOL  = puyaisp -f $(OUTPUT)/$(PROJECT).bin
#ISPTOOL  = pyocd load $(OUTPUT)/$(PROJECT).bin -t $(TARGET)
CLEAN    = rm -f *.lst *.obj *.cof *.list *.map *.eep.hex *.o *.d

# Compiler Flags
CFLAGS   = -Os -flto -std=c++26 -fno-exceptions -fno-rtti -Wall -Wno-volatile -Wno-register -fpermissive
CFLAGS  += -I$(SOURCE) $(CPUARCH) -DF_CPU=$(F_CPU) -fdata-sections -ffunction-sections -fno-builtin -fno-common
LDFLAGS  = -T$(LDSCRIPT) #-nostartfiles -nostdlib
LDFLAGS += -Wl,--gc-sections,--build-id=none --specs=nano.specs --specs=nosys.specs
CFILES   = $(wildcard $(SOURCE)/*.c) $(wildcard $(SOURCE)/*.cpp) $(wildcard $(SOURCE)/*.S)
CFILES  += $(wildcard $(SOURCE)/*/*.c) $(wildcard $(SOURCE)/*/*.cpp) $(wildcard $(SOURCE)/*/*.S)

# Symbolic Targets
help:
	@echo "Use the following commands:"
	@echo "make all       compile and build $(PROJECT).elf/.bin/.hex/.asm"
	@echo "make hex       compile and build $(PROJECT).hex"
	@echo "make asm       compile and disassemble to $(PROJECT).asm"
	@echo "make bin       compile and build $(PROJECT).bin"
	@echo "make flash     compile and upload to MCU"
	@echo "make clean     remove all build files"

$(OUTPUT)/$(PROJECT).elf: $(CFILES)
	@echo "Building $(OUTPUT)/$(PROJECT).elf ..."
	@mkdir -p $(OUTPUT)
	@$(CC) -o $@ $^ $(CFLAGS) $(LDFLAGS)

$(OUTPUT)/$(PROJECT).lst: $(OUTPUT)/$(PROJECT).elf
	@echo "Building $(OUTPUT)/$(PROJECT).lst ..."
	@$(OBJDUMP) -S $^ > $(OUTPUT)/$(PROJECT).lst

$(OUTPUT)/$(PROJECT).map: $(OUTPUT)/$(PROJECT).elf
	@echo "Building $(OUTPUT)/$(PROJECT).map ..."
	@$(OBJDUMP) -t $^ > $(OUTPUT)/$(PROJECT).map

$(OUTPUT)/$(PROJECT).bin: $(OUTPUT)/$(PROJECT).elf
	@echo "Building $(OUTPUT)/$(PROJECT).bin ..."
	@$(OBJCOPY) -O binary $< $(OUTPUT)/$(PROJECT).bin

$(OUTPUT)/$(PROJECT).hex: $(OUTPUT)/$(PROJECT).elf
	@echo "Building $(OUTPUT)/$(PROJECT).hex ..."
	@$(OBJCOPY) -O ihex $< $(OUTPUT)/$(PROJECT).hex

$(OUTPUT)/$(PROJECT).asm: $(OUTPUT)/$(PROJECT).elf
	@echo "Disassembling to $(OUTPUT)/$(PROJECT).asm ..."
	@$(OBJDUMP) -d $(OUTPUT)/$(PROJECT).elf > $(OUTPUT)/$(PROJECT).asm

all:	$(OUTPUT)/$(PROJECT).lst $(OUTPUT)/$(PROJECT).map $(OUTPUT)/$(PROJECT).bin $(OUTPUT)/$(PROJECT).hex $(OUTPUT)/$(PROJECT).asm size

elf:	$(OUTPUT)/$(PROJECT).elf removetemp size

bin:	$(OUTPUT)/$(PROJECT).bin removetemp size removeelf

hex:	$(OUTPUT)/$(PROJECT).hex removetemp size removeelf

asm:	$(OUTPUT)/$(PROJECT).asm removetemp size removeelf

flash:	$(OUTPUT)/$(PROJECT).bin size removeelf
	@echo "Uploading to MCU ..."
	@$(ISPTOOL)

clean:
	@echo "Cleaning all up ..."
	@$(CLEAN)
	@rm -r $(OUTPUT)

size:
	@echo "------------------"
	@echo "FLASH: $(shell $(OBJSIZE) -d $(OUTPUT)/$(PROJECT).elf | awk '/[0-9]/ {print $$1 + $$2}') bytes"
	@echo "SRAM:  $(shell $(OBJSIZE) -d $(OUTPUT)/$(PROJECT).elf | awk '/[0-9]/ {print $$2 + $$3}') bytes"
	@echo "------------------"

removetemp:
	@echo "Removing temporary files ..."
	@$(CLEAN)

removeelf:
	@echo "Removing $(OUTPUT)/$(PROJECT).elf ..."
	@rm -f $(OUTPUT)/$(PROJECT).elf
